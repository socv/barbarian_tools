#!/usr/bin/env perl

# ssh -L ... の代わり。
# ssh -L は remote sshd の設定で、「AllowTcpForwarding no」になっていると働かないが、
# そんなの関係ない。

use strict;
use warnings;

use IO::Select;
use IO::Socket::INET;
use Socket;
use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

use Getopt::Long qw(:config posix_default no_ignore_case gnu_getopt require_order);

my $opt_listen_port;
my $opt_to;
my $opt_to_ssh_format;
my $opt_loops;
my $opt_verbose;
my $opt_help;

Getopt::Long::GetOptions(
    "h|help" => \$opt_help,
    "v|verbose" => \$opt_verbose,
    "l|listen=i" => \$opt_listen_port,
    "t|to=s" => \$opt_to,
    "L=s" => \$opt_to_ssh_format,
    "n|loops=i" => \$opt_loops,
) or usage();

($opt_help) and help();
sub help {
    print "Usage: $0 --listen=PORT --to=TARGET_ADDR:TARGET_PORT [--] SSH-SERVER\n";
    print "Option:\n";
    print " -h, --help : これ\n";
    print " -v, --verbose : 騒がしく\n";
    print " -l LOCAL_LISTEN_PORT, --listen=LOCAL_LISTEN_PORT : listenするローカルポート\n";
    print " -t TARGET, --to=TARGET : TARGET_HOST:TARGET_PORT 形式で\n";
    print " -n N, --loops=N : 何回分acceptするか。デフォルトは0で、無制限\n";
    print "\n";
    print " -l -t を使わず、 -L LOCAL_LISTEN_PORT:TARGET_HOST:TARGET_PORT と書いても構いません。\n";
    print "SSH-SERVER の部分はそのままsshコマンドに渡されます。\n";

    exit 1;
}
my @ssh_param = @ARGV;
(@ssh_param) or usage();
sub usage {
    my $msg = shift;
    warn "$msg\n" if $msg;
    die "Usage: $0 --listen=PORT --to=TARGET_ADDR:TARGET_PORT SSH-SERVER\n"
      . "詳しくは `$0 --help' \n";
}

my $REGEXP_PORT = qr/[1-9][0-9]{0,4}/s;
my $REGEXP_HOST = qr{ \w+ (-\w+)* (\. \w+ (-\w+)* )* }sx;
my ($opt_to_host, $opt_to_port);
if($opt_to_ssh_format) {
    ($opt_listen_port) and usage("--listen と -L は同時に指定できません");
    ($opt_to) and usage("--to と -L は同時に指定できません");
    ($opt_to_ssh_format =~ m{\A(?<LOCAL_LISTEN_PORT>$REGEXP_PORT):(?<TARGET_HOST>$REGEXP_HOST):(?<TARGET_PORT>$REGEXP_PORT)\z}s)
      or usage("オプションの書式が不正: -L $opt_to_ssh_format");
    ($opt_listen_port, $opt_to_host, $opt_to_port) = @+{qw(LOCAL_LISTEN_PORT TARGET_HOST TARGET_PORT)};
}
else {
    ($opt_listen_port =~ m{^$REGEXP_PORT$}s) or usage("オプションの書式が不正: --listen=$opt_listen_port");
    ($opt_to =~ m{\A(?<TARGET_HOST>$REGEXP_HOST):(?<TARGET_PORT>$REGEXP_PORT)\z}s) or usage("オプションの書式が不正: --to=$opt_to");
    ($opt_to_host, $opt_to_port) = @+{qw(TARGET_HOST TARGET_PORT)};
}


my $select = IO::Select->new;

my $listen_fh = IO::Socket::INET->new(
    Listen => 5,
    LocalPort => $opt_listen_port,
    # LocalAddr => "127.0.0.1",
    Proto => "tcp",
    ReuseAddr => 1,
    ReusePort => 1,
);
$listen_fh->listen or die "listen: $!";
$select->add($listen_fh);


sub nonblock {
    my $fh = shift;
    my $flags = fcntl($fh, F_GETFL, 0) or die "ERROR fcntl F_GETFL: $!";
    fcntl($fh, F_SETFL, $flags | O_NONBLOCK) or die "ERROR fcntl F_SETFL: $!";
}

my %pair;
my %type;

my $count_client = 0;
while(my @can_read = $select->can_read) {
    for my $fh (@can_read) {
        if($fh == $listen_fh) {
            $count_client++;
            if($opt_loops && $count_client >= $opt_loops) {
                $select->remove($listen_fh);
            }

            my $client_fh = $listen_fh->accept or die "accept: $!";
            nonblock($client_fh);
            $select->add($client_fh);

            my ($child_fh, $parent_fh) = IO::Socket->socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC) or die "ERROR: socketpair: $!";

            if(!fork) {
                close($parent_fh);
                open(STDOUT, ">&", $child_fh) or die "ERROR: dup2 STDOUT : $!";
                open(STDIN, "<&", $child_fh) or die "ERROR: dup2 STDIN : $!";
                my @ssh_cmd = ("ssh",
                    ($opt_verbose ? () : ("-q")),
                    @ssh_param, "nc", $opt_to_host, $opt_to_port);
                print STDERR "RUN: @ssh_cmd\n" if $opt_verbose;
                exec(@ssh_cmd);
                exit -1;
            }
            close($child_fh);
            nonblock($parent_fh);
            $select->add($parent_fh);

            $pair{$parent_fh} = $client_fh;
            $pair{$client_fh} = $parent_fh;
            $type{$client_fh} = "client";
            $type{$parent_fh} = "remote";
            warn "success accept: client='$client_fh', remote='$parent_fh'\n" if $opt_verbose;
        }
        elsif(my $fh_write = $pair{$fh}) {
            my $type = $type{$fh};
            my $tmp;
            my $r = sysread($fh, $tmp, 1024);
            if(!$r) {
                (defined $r) or warn "ERROR: sysread($fh): $!";
                $select->remove($fh);
                warn "(type=$type : $fh) : removed\n" if $opt_verbose;
                $fh_write->shutdown(1);

                delete $pair{$fh};
                delete $type{$fh};
            }
            else {
                print $fh_write $tmp;
                # この部分はあからさまに間違っているけど、そのうち気が向いたら直す。たぶん
            }
        }
        else {
            die "fh='$fh' : unknown";
        }
    }
}
