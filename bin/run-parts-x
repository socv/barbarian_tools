#!/usr/bin/env perl
use strict;
use warnings;

our $VERSION = '1.00';

use Getopt::Long qw(:config posix_default no_ignore_case gnu_getopt);
use Sys::Syslog qw(:standard :macros);
use Time::HiRes ();
use POSIX qw(isatty strftime);

(my $SELF_NAME = $0) =~ s(.*/)()s;

my $isatty = POSIX::isatty(*STDERR) ? *STDERR : POSIX::isatty(*STDOUT) ? *STDOUT : undef;
my $opt_dry_run;
my $opt_list;
my $opt_help;
my $opt_no_ionice;
my $opt_nice = 1;
my $opt_sleep_1;
my $opt_sleep_2;
my $opt_lock_timeout = 50;

Getopt::Long::GetOptions(
    "h|help"           => \$opt_help,
    "l|list"           => \$opt_list,
    "n|dry-run"        => \$opt_dry_run,
    "N|nice=i"           => \$opt_nice,
    "I|no-ionice"        => \$opt_no_ionice,
    "s|sleep-first=s"  => \$opt_sleep_1,
    "S|sleep-second=s" => \$opt_sleep_2,
    "lock-timeout=i" => \$opt_lock_timeout,
) or die "fatal error\n";


$SIG{__WARN__} = \&print_warn_message;
sub print_warn_message {
    chomp (my $s = shift);
    print {*STDERR} "$SELF_NAME: " . $s . "\n";
}


my @dirs = @ARGV;
if ($opt_help) { help() }
(@dirs) or usage();
sub usage {
    print "Usage: $0 [OPTION...] DIR\n";
    print "Try `$0 --help' for more information.\n";
    exit 1;
}
sub help {
    print "## Usage\n";
    print "\n";
    print "```\n";
    print "$0 [OPTION...] DIR...\n";
    print "```\n";
    print "\n";
    print "## Option\n";
    print "\n";
    print "| 短表記  | 長表記              | 意味 |\n";
    print "|:--------|:--------------------|:-----|\n";
    print "| -h      | --help              | これ\n";
    print "| -l      | --list              | (+x -x を付記しながら) 候補となるファイルを表示\n";
    print "| -n      | --dry-run           | 実際に実行せず、実行するはずだったスクリプトのパスを表示\n";
    print "| -I      | --no-ionice         | ioniceを使わない\n";
    print "| -N N    | --nice=N            | (default 1) nice値を指定。0ならniceを使わない\n";
    print "| -s M..N | --sleep-first=M..N  | 最初のタスク前のsleep\n";
    print "| -S M..N | --sleep-second=M..N | 2番目からのタスク前のsleep\n";
    print "\n";
    print "## \"M..N\" の説明\n";
    print "\n";
    print "  * MとNに秒数を表す整数を記載すると、最小M〜最大Nのランダムな時間sleepします\n";
    print "  * \"M..\" を省略すると、 \"0..N\" が書かれたものと見なされます。\n";
    exit 1;
}

for (@dirs) {
    (-d $_) or die "$0: ERROR: not a directory: $_\n";
}

my ($opt_sleep_1_min, $opt_sleep_1_max) = parse_time_range($opt_sleep_1, "--sleep-first");
my ($opt_sleep_2_min, $opt_sleep_2_max) = parse_time_range($opt_sleep_2, "--sleep-second");
sub parse_time_range {
    my ($arg, $name) = @_;
    my ($min, $max)
      = (!defined $arg) ? (undef, undef)
      : ($arg =~ m{^(\d+)$}s) ? (0, $1)
      : ($arg =~ m{^(\d+)\.\.(\d+)$}s) ? ($1, $2)
      :                                 die "ERROR: invalid format $name=$arg\n";
    ($min, $max);
}

system("renice $opt_nice $$ >/dev/null 2>&1") if $opt_nice;
system("ionice -c3 -p $$ >/dev/null 2>&1") unless $opt_no_ionice;

for my $dir (@dirs) {
    eval { do_each_dir($dir); };
    if ($@) {
        warn $@;
    }
}

{
    package RunPartsX::StopWatch;
    use strict;
    use warnings;
    use overload bool => sub {1}, '""' => 'stringify', fallback => 1;

    sub stringify {
        my $self    = shift;
        my $elapsed = Time::HiRes::gettimeofday() - $self->{time};
        my (undef, undef, $cu, $cs) = times();
        my ($user, $system) = (($cu - $self->{clock}[2]) / 100, ($cs - $self->{clock}[3]) / 100);
        sprintf("(%.2fuser %.2fsystem %.3felapsed)", $user, $system, $elapsed);
    }
    sub new {
        my $class = shift;
        my $self = bless {}, $class;
        $self->{time}  = Time::HiRes::gettimeofday();
        $self->{clock} = [times()];
        $self;
    }
}

use Fcntl qw(:flock);
sub take_flock {
    my ($fh, $filename, $limit) = @_;
    my $error_lock;
    my $start_time = Time::HiRes::gettimeofday();
    while(1) {
        $error_lock = flock($fh, LOCK_EX | LOCK_NB) ? '' : $! || "ERROR";
        last if !$error_lock; # success
        last if $! != 11;  # (11=EAGAIN=EWOULDBLOCK)
        last if !$limit || Time::HiRes::gettimeofday() >= $start_time + $limit;  # time over
        Time::HiRes::sleep(0.1);
    }
    return $error_lock;
}
sub release_lock {
    my ($fh, $filename) = @_;
    flock($fh, LOCK_UN) or die "flock(('$filename'), LOCK_UN) : $!";
}

sub run_script {
    my %args      = @_;
    my $fn        = $args{fn};
    my $path      = $args{path};
    my $index     = $args{index};
    my $n_scripts = $args{n_scripts};
    my $dir = $args{dir};

    my ($sleep_min, $sleep_max)
      = (!$index)
      ? ($opt_sleep_1_min, $opt_sleep_1_max)
      : ($opt_sleep_2_min, $opt_sleep_2_max);

    if ($sleep_min || $sleep_max) {
        my $sleep = $sleep_min;
        $sleep += rand($sleep_max - $sleep_min + 1) if $sleep_max > $sleep_min;
        $sleep = sprintf("%.1f", $sleep);
        if ($sleep > 0) {
            print_log("run-parts-x($dir)", LOG_NOTICE, "[$index] sleep ($sleep\[s]) ...");
            Time::HiRes::sleep($sleep);
        }
    }

    print_log("run-parts-x($dir)", LOG_NOTICE, "[$index] starting $fn");

    my $stop_watch_file = RunPartsX::StopWatch->new;
    my $child_proc;
    if (!open($child_proc, "-|")) {
        open(STDERR, '>&', *STDOUT) or warn "dup2: $!";
        exec($path);
        exit 1;
    }
    local $/ = undef;
    my $output = <$child_proc>;
    close($child_proc) or die "ERROR: close: $!";

    my ($exit_status, $signal) = ($? >> 8, $? & 0xff);
    my $status = "";
    $status .= " (exit=$exit_status)" if $exit_status;
    $status .= " (signal=$signal)"    if $signal;

    $output =~ s/\e\[[\d\;]*m//gs;
    $output =~ s/\r*\n|\r/\n/gs;
    $output =~ s/\A([^\S\n]*\n)+//s;
    $output =~ s/\s+\z//s;
    if (length $output) {
        print "\n$path:\n"
          . "length=" . length($output) . "\n"
          . "{{{\n"
          . "$output\n"
          . "}}}\n";
    }

    my $log_level_finish = ($status ? LOG_ERR : LOG_NOTICE);
    print_log("run-parts-x($dir)", $log_level_finish, "[$index] finished $fn$status $stop_watch_file");
}
sub do_each_dir {
    my $dir = shift;
    $dir =~ s{/*$}{/}s;

    opendir(my $dir_fh, $dir) or die "$0: WARNING: opendir '$dir': $!\n";
    my @files = grep { $_ ne "." && $_ ne ".." } sort readdir($dir_fh);
    closedir($dir_fh);

    open(my $fh_lock, "<", $dir) or die "$0: WARNING: open '$dir': $!\n";
    my $time_before_lock = Time::HiRes::gettimeofday();
    my $error_lock = take_flock($fh_lock, $dir, $opt_lock_timeout);
    my $elapsed_lock = sprintf("%.3f", Time::HiRes::gettimeofday() - $time_before_lock);
    $error_lock and die "ERROR: (elapsed=$elapsed_lock\[s\]) lock '$dir' : $error_lock\n";

    my @scripts;
    for my $fn (@files) {
        my $path = $dir . $fn;
        next unless -f $path;
        next if $fn =~ m{\.(cfsaved|rpmsave|rpmorig|rpmnew|swp)$}s;
        next if $fn =~ m{(\,v|\,|\~)$}s;

        if ($opt_list) {
            printf("%s %s\n", ((-x $path) ? "+x" : "-x"), $path);
            next;
        }
        next unless -x $path;

        if ($opt_dry_run) {
            print "$path\n";
        }
        else {
            push @scripts, +{ fn => $fn, path => $path };
        }
    }

    my $n_scripts = @scripts;
    if ($n_scripts) {
        my $stop_watch_dir = RunPartsX::StopWatch->new;
        print_log("run-parts-x($dir)", LOG_NOTICE, "$n_scripts scripts start") if $n_scripts > 1;

        for (my $index = 0; $index < $n_scripts; ++$index) {
            local $_ = $scripts[$index];
            run_script(dir => $dir, fn => $_->{fn}, path => $_->{path}, index => $index, n_scripts => $n_scripts);
        }
        print_log("run-parts-x($dir)", LOG_NOTICE, "$n_scripts scripts finished $stop_watch_dir") if $n_scripts > 1;
    }
}

sub print_log {
    my ($ident, $level, $message) = @_;
    chomp $message;
    if($isatty) {
        ## no critic (ProhibitMagicNumbers)
        my $time = Time::HiRes::gettimeofday();
        print {$isatty} POSIX::strftime("%Y-%m-%dT%H:%M:%S", localtime int($time))
          . sprintf(".%03d", ($time - int($time)) * 1000)
          . ": $ident\[$$]: $message\n";
    }
    openlog($ident, "ndelay,pid", "cron");
    syslog($level, $message);
    closelog();
}
