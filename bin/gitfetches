#!/usr/bin/env perl
use strict;
use warnings;
use Cwd   ();
use POSIX ();
use Time::HiRes ();
use List::Util  ();
use Getopt::Long qw(:config posix_default no_ignore_case gnu_getopt);

my $isatty = (
    POSIX::isatty(*STDOUT) ? *STDOUT :
    POSIX::isatty(*STDERR) ? *STDERR :
    undef
);
$| = 1;

my $term_size_width = eval {
    if($isatty) {
        require Term::Size::Perl;
        my ($n_cols,$n_rows) = Term::Size::Perl::chars($isatty);
        $n_cols;
    }
} || 80;
warn $@ if $@;


my $opt_max_procs = get_n_cpu();

Getopt::Long::GetOptions(
    "P|max-procs=i" => \$opt_max_procs,
) or die "fatal";

(int($opt_max_procs) == $opt_max_procs) && $opt_max_procs >= 1
  or die "ERROR: invalid value : --max-procs=$opt_max_procs";

sub print_info {
    my $message = shift;
    return unless $isatty;
    print {$isatty} $message or die "ERROR: print: $!";
}

my @dirs = map { Cwd::abs_path($_) } @ARGV;

@dirs = map {
    my $dir = $_;
    $dir =~ s{/\.git\z}{}s;
    $dir =~ s{\/*\z}{/}s;
    $dir;
} @dirs;

my $max_length_of_dir = List::Util::max(map { length $_ } @dirs);

my $total_time_of_begin = Time::HiRes::gettimeofday;
for my $dir (@dirs) {
    print_info(sprintf("%-${max_length_of_dir}s : ...", $dir));

    my $git_dir = $dir . ".git";
    unless (-d $git_dir) {
        warn "$0: WARNING: directory not found '$$git_dir'\n";
        next;
    }
    if (!chdir($dir)) {
        warn "$0: WARNING: chdir '$dir': $!";
        next;
    }

    my $time_of_begin = Time::HiRes::gettimeofday;
    if ($isatty) {
        ## TODO
        system("git fetch -q");
    }
    else {
        ## TODO
        system("git fetch -q");
    }
    my $time_of_elapsed = sprintf("%.6f", Time::HiRes::gettimeofday - $time_of_begin);
    print_info(" (elapsed=$time_of_elapsed\[s])\n");
}
my $total_time_of_elapsed = sprintf("%.6f", Time::HiRes::gettimeofday - $total_time_of_begin);
print_info("total (elapsed=$total_time_of_elapsed\[s])\n");

sub get_n_cpu {
    my @processor = split(/\n/, `cat /proc/cpuinfo | grep ^processor`);
    return scalar(@processor) || 1;
}
