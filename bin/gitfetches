#!/usr/bin/env perl
use strict;
use warnings;
use Cwd   ();
use POSIX ();
use Time::HiRes ();
use List::Util  ();
use Getopt::Long qw(:config posix_default no_ignore_case gnu_getopt);

my $isatty = (
    POSIX::isatty(*STDOUT) ? *STDOUT :
    POSIX::isatty(*STDERR) ? *STDERR :
    undef
);
$| = 1;

my $term_size_width = eval {
    if($isatty) {
        require Term::Size::Perl;
        my ($n_cols,$n_rows) = Term::Size::Perl::chars($isatty);
        $n_cols;
    }
} || 80;
warn $@ if $@;


my $opt_max_procs = get_n_cpu();
$opt_max_procs = 1;

Getopt::Long::GetOptions(
    "P|max-procs=i" => \$opt_max_procs,
) or die "fatal";

(int($opt_max_procs) == $opt_max_procs) && $opt_max_procs >= 1
  or die "ERROR: invalid value : --max-procs=$opt_max_procs";

sub print_info {
    my $message = shift;
    return unless $isatty;
    chomp $message;
    print {$isatty} "$message\n" or die "ERROR: print: $!";
}

my @dirs;
for (@ARGV) {
    my $dir = Cwd::abs_path($_);
    if($dir) {
        $dir =~ s{/\.git(?:/.*?)?\z}{}s;
        $dir =~ s{\/*\z}{/}s;
        if(-d $dir) {
            push @dirs, $dir;
        }
        else {
            system("ls", "-ald", "--", $dir);
            warn "$_: ERROR: is not directory";
        }
    }
    else {
        warn "$_: ERROR: not found";
    }
}

(@dirs) or usage();

my $max_length_of_dir = List::Util::max(map { length $_ } @dirs);

my $sum_elapsed = 0;
my $total_time_of_begin = Time::HiRes::gettimeofday;
my %children;
for my $dir (@dirs) {
    while(%children >= $opt_max_procs) {
        wait_one_child();
    }
    my $git_dir = $dir . ".git";
    unless (-d $git_dir) {
        warn "$0: WARNING: directory not found '$git_dir'\n";
        next;
    }
    if (!chdir($dir)) {
        warn "$0: WARNING: chdir '$dir': $!";
        next;
    }

    my $time_of_begin = Time::HiRes::gettimeofday;

    my $pid = fork;
    if(!$pid) {
        exec("git fetch -q");
        exit 1;
    }
    $children{$pid} = +{ dir => $dir, time_of_begin => $time_of_begin };
    print_info(sprintf("%-${max_length_of_dir}s : [pid=$pid]\n", $dir));
}

while (%children) {
    wait_one_child();
}
print_info(sprintf("sum (elapsed=%.6f[s])\n", $sum_elapsed));


my $total_time_of_elapsed = sprintf("%.6f", Time::HiRes::gettimeofday - $total_time_of_begin);
print_info("total (elapsed=$total_time_of_elapsed\[s])\n");
print_info("term_size_width=$term_size_width\n");

sub wait_one_child {
    my $procs_list = join(", ", sort map {
        my $pid = $_;
        my $s = $children{$pid}->{dir};
        $s =~ s{.*/([^/]+)/+$}{$1};
        "$pid:$s";
    } sort { $a <=> $b } keys %children);
    print_info(
        sprintf("%-${term_size_width}.${term_size_width}s\r", "more " . scalar(keys %children) . " procs: $procs_list")
    );
    my $killed_pid = waitpid(-1 , 0);
    print_info("\e[K");
    if($killed_pid < 0) {
        warn "waitpid return-value = $killed_pid : $!";
        last;
    }
    my $hash = delete $children{$killed_pid};
    my ($dir, $time_of_begin) = @{$hash}{qw/dir time_of_begin/};
    my $elapsed = Time::HiRes::gettimeofday - $time_of_begin;
    print_info(
        sprintf("%-${max_length_of_dir}s : (elapsed=%.6f[s]) [pid=$killed_pid]\n",
            $dir, $elapsed)
    );
    $sum_elapsed += $elapsed;
}

sub get_n_cpu {
    my @processor = split(/\n/, `cat /proc/cpuinfo | grep ^processor`);
    return scalar(@processor) || 1;
}

sub print_usage {
    my $message = shift;
    my $device = shift // *STDERR;
    if($message) {
        chomp $message;
        print {$device} "$message\n";
    }
    print {$device} "Usage: $0 DIR...\n";
    exit 1;
}
sub usage {
    my $message = shift;
    my $device = shift // *STDERR;
    print_usage($message, $device);
    exit 1;
}
