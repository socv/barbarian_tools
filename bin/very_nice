#!/usr/bin/perl -TW

# * 類似のツール
#  * https://github.com/opsengine/cpulimit

use strict;
use warnings;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_getopt require_order);
use Time::HiRes;
use List::Util qw(max min sum);
use POSIX;
use Carp;
use Scalar::Util ();


my ($cycle_min, $cycle_default, $cycle_max) = (0.01, 0.1, 100);
my ($rate_min, $rate_default, $rate_max) = (0.001, 0.25, 1.0);

my $opt_nice = 15;
my $opt_arg_is_pid;
my $opt_arg_is_pgid;
my $opt_arg_is_commandname;
my $opt_help;
my $opt_debug;
my $opt_verbose;
my $opt_quiet;
my $opt_cycle = $cycle_default;
my $opt_rate  = $rate_default;
my $opt_boost = undef;

Getopt::Long::GetOptions(
    "h|help"    => \$opt_help,
    "q|quiet" => \$opt_quiet,
    "v|verbose" => \$opt_verbose,
    "D|debug" => \$opt_debug,
    "p|pid"       => \$opt_arg_is_pid,
    "P|pgid" => \$opt_arg_is_pgid,
    "name" => \$opt_arg_is_commandname,
    "r|rate=f"  => \$opt_rate,
    "c|cycle=f" => \$opt_cycle,
    "boost!" => \$opt_boost,
    "nice=i" => \$opt_nice,
) or die "ERROR";
(@ARGV) or usage();
($opt_help) and usage();

($rate_min <= $opt_rate && $opt_rate < $rate_max) or usage("--rate=$opt_rate は範囲外");
($cycle_min <= $opt_cycle && $opt_cycle < $cycle_max) or usage("--cycle=$opt_cycle は範囲外");
($opt_boost && $opt_arg_is_pgid) and usage("--boost と --pgid の両方は同時に使えません");
if(!$opt_arg_is_pgid && !defined $opt_boost) {
    $opt_boost = 1;
}
($opt_arg_is_pid && $opt_arg_is_pgid) and usage("--pid と --pgid を両方同時に使うことはできません");
($opt_arg_is_commandname && $opt_arg_is_pgid) and usage("--name と --pgid を両方同時に使うことはできません");
($opt_arg_is_pid && $opt_arg_is_commandname) and usage("--pid と --name を両方同時に使うことはできません");


unless($opt_quiet) {
    print STDERR "$0: INFO: cycle=$opt_cycle, rate=$opt_rate\n";
}

sub usage {
    my $s = shift;
    print STDERR "$s\n\n" if $s;

    (my $myname = $0) =~ s/.*\///;
    print STDERR "Usage:\n";
    print STDERR "  $myname [options] -p PID [PID...]\n";
    print STDERR "  $myname [options] --name COMMAND_NAME [...]\n";
    print STDERR "  $myname [options] -P PGID [PGID...]\n";
    print STDERR "  $myname [options] command [args...]\n";
    print STDERR "Options:\n";
    print STDERR "  -h, --help     : これを表示\n";
    print STDERR "  -v, --verbose  : 余計な表示\n";
    print STDERR "      --debug    : もっと余計な表示\n";
    print STDERR "  -p, --pid      : パラメーターは実行するコマンドではなく、プロセスIDである\n";
    print STDERR "  -P, --pgid     : パラメーターは実行するコマンドではなく、プロセスグループIDである\n";
    print STDERR "      --name     : パラメーターは実行するコマンドではなく、既存プロセスのコマンド名\n";
    print STDERR "  -r, --rate=X   : どの程度CPUを与えるか。 デフォルトは $rate_default ($rate_min 以上、 $rate_max 未満)\n";
    print STDERR "  -c, --cycle=X  : 1周の秒数。 デフォルトは $cycle_default ($cycle_min 以上、 $cycle_max 未満)\n";
    print STDERR "      --boost    : CPU使用率が rate に足りていない場合、多めに時間を割り当てる (--pgid でない場合デフォルトで有効)\n";
    print STDERR "      --no-boost : --boost を無効化\n";
    print STDERR "      --nice=X   : デフォルト15。0以外ならばreniceする。(同時にioniceも)\n";
    print STDERR "\n"
      . " * ionice に似た使い方。\n"
      . " * SIGSTOP と SIGCONT を交互に送ることで、指定プロセスのCPU使用率を下げる。\n"
      . " * nice や ionice では物足りない時に。\n"
      . " * お行儀の悪いツールなので要注意。\n";
    exit(1);
}

my $signaled;
$SIG{INT} = $SIG{QUIT} = $SIG{TERM} = sub {
    my $sig = shift;
    warn "caught signal $sig\n";
    if($signaled) { warn "caught signal $sig -> abort\n"; POSIX::abort(); }
    $signaled = $sig;
};

my @ids;
if($opt_arg_is_commandname) {
    my %comm;
    my @re_command;
    for(@ARGV) {
        if($_ =~ m{^/}s || $_ =~ m{/$}s) {
            (m{^/(.+)/\z}s) or die "'$_' は不正な書式です。前後を / で囲む必要があります\n";
            my $re = $1;
            push @re_command, qr{$re};
        }
        else {
            $comm{"($_)"} = 1;
        }
    }

    my @all_pids = get_all_pids();
    @ids = grep {
        my $pid = $_;
        if($pid == $$) {
            0;
        }
        else {
            my %stat = read_proc_stat($pid);
            if($comm{ $stat{comm} }) {
                1;
            }
            else {
                my $matched = 0;
                if(@re_command) {
                    my $cmdline = read_proc_cmdline($pid);
                    for my $re (@re_command) {
                        if($cmdline =~ $re) {
                            my $cmdline_encoded = $cmdline;
                            $cmdline_encoded =~ s{\0}{ }gs;
                            print_info("matched /$re/ : pid=$pid, cmdline=$cmdline_encoded");
                            $matched = 1;
                            last;
                        }
                    }
                }
                $matched;
            }
        }
    } @all_pids;
    if(!@ids) {
        die "コマンド名の条件 (@ARGV) にあうプロセス見つかりませんでした";
    }
}
elsif ($opt_arg_is_pid || $opt_arg_is_pgid) {
    @ids = @ARGV;
}
else {
    sub sigchld {
        $SIG{CHLD} = \&sigchld;
        print_debug("got SIGCHLD");
        my $dummy = wait;
        print_debug("wait -> $dummy\n");
    }
    $SIG{CHLD} = \&sigchld;
    my $pid = fork // die "fork: $!";
    if (!$pid) {
        exec(@ARGV);
        exit;
    }
    push @ids, $pid;
}

@ids = map {
    (/^([1-9][0-9]{0,4})\z/s) or die "$0: ERROR: invalid format pid '$_'\n";
    $1;
} @ids;

print_verbose(($opt_arg_is_pgid ? "pgid" : "pid") . "=@ids");

my @pid = @ids;
if($opt_arg_is_pgid) {
    @pid = get_pids_by_pgids(@ids);
    print_verbose("pgid=(@ids), pid=(@pid)");
    scalar(@pid) or die "pgid (@ids) となるプロセスは存在しません\n";
}

@pid = map {
    (/^([1-9][0-9]{0,4})\z/s) or die "$0: ERROR: invalid format pid '$_'\n";
    $1;
} @pid;

if($opt_nice) {
    ($opt_nice =~ m{^(\d+)\z}) or die "ERROR: invalid format --nice=$opt_nice\n";
    $opt_nice = $1;
    $ENV{PATH} = "/usr/bin:/bin";
    system_("/usr/bin/renice", $opt_nice, @pid);
    system("/usr/bin/ionice", "-c3", "-p", @pid);
}
sub system_ {
    my @command_arg = @_;
    for(my $i = 0; $i < @command_arg; ++$i) {
        if(Scalar::Util::tainted($command_arg[$i])) {
            warn "ERROR: when call system_(@command_arg)\n";
            warn "command_arg[$i] = '$command_arg[$i]' is tainted\n";
            Carp::confess("fatal");
        }
    }
    system(@command_arg);
}


use Config;
my @sig_name = split(/ /, $Config{sig_name});
my @sig_num  = split(/ /, $Config{sig_num});
my %sig_name_to_num = (
    (map { $sig_name[$_] => $sig_num[$_] } (1 .. (@sig_name - 1))),
    (map { $_ => $_ } @sig_num),
);


my %ids = map { $_ => "" } @ids;

sub send_signal {
    my $signal   = shift;
    print_debug("send_signal($signal)");
    if($opt_arg_is_pgid) {
        $signal = - $sig_name_to_num{$signal};
    }
    my @result; my $error_found;
    for my $id (keys %ids) {
        $! = undef;
        my $r = kill($signal => $id) or delete $ids{$id};
        $error_found ||= $!;
        push @result, "$id -> r=$r" . ($! ? " (\$!=$!)" : "");
    }
    if($error_found || $opt_verbose) {
        my $mesg = "kill $signal => (". join(", ", @result) .")";
        if($error_found) {
            print_notice($mesg);
        }
        else {
            print_debug($mesg);
        }
    }
};
my $delay_active   = $opt_cycle * $opt_rate;
my $delay_inactive_default = $opt_cycle - $delay_active;
my %last_cpu_time = map { $_ => read_cpu_time($_) } keys %ids;

my $sent_SIGSTOP = 0;
while (%ids) {
    my $s = Time::HiRes::gettimeofday();

    if($sent_SIGSTOP) {
        send_signal("CONT");
        $sent_SIGSTOP = 0;
    }
    last unless %ids;
    last if $signaled;
    Time::HiRes::sleep($delay_active);
    last if $signaled;

    my $elapsed = sprintf("%.6f", Time::HiRes::gettimeofday() - $s);

    my $delay_inactive = $delay_inactive_default;

    if($opt_boost) {
        my $max_cpu_time = 0;
        my @used;
        for my $pid (keys %ids) {
            eval {
                my $cpu_time = read_cpu_time($pid);
                my $used = sprintf("%.2f", $cpu_time - $last_cpu_time{$pid});
                $last_cpu_time{$pid} = $cpu_time;

                $max_cpu_time = max($max_cpu_time, $used);
                push @used, $used;
            };
            if($@) {
                warn "WARNING: $@";
                delete $ids{$pid};
            }
        }

        $delay_inactive = ($max_cpu_time / $opt_rate) - $elapsed;
        print_verbose("opt_rate=$opt_rate, opt_cycle=$opt_cycle, delay_active=$delay_active"
            . " : elapsed=$elapsed, cpu_time=({@used}, max_cpu_time=$max_cpu_time)"
            . " : delay_inactive=(default=$delay_inactive_default, $delay_inactive)");
    }

    if($delay_inactive > 0) {
        send_signal("STOP");
        $sent_SIGSTOP = 1;
        Time::HiRes::sleep($delay_inactive);
    }
}


sub read_proc_cmdline {
    my $pid = shift;
    my $fn = "/proc/$pid/cmdline";
    open(FILE, "<", $fn) or die "$fn: open: $!\n";
    local $/ = undef;
    my $cmdline = <FILE>;
    close(FILE);
    wantarray ? split(/\0/, $cmdline) : $cmdline;
}

sub read_proc_stat {
    my $pid = shift;
    my $fn = "/proc/$pid/stat";
    open(STAT, "<", $fn) or die "$fn: open: $!\n";
    my %values;
    @values{qw(pid comm state ppid pgrp session tty_nr tpgid flags minflt cminflt majflt cmajflt utime stime cutime cstime priority nice)}
      = split(/ /, <STAT>);
    close(STAT);
    wantarray ? %values : \%values;
}
sub read_cpu_time {
    my $pid = shift;
    my %stat = read_proc_stat($pid);
    return sprintf("%.2f", 0.01 * sum @stat{qw(utime stime cutime cstime)});
}
sub get_all_pids {
    opendir(D, "/proc") or die "opendir '/proc': $!\n";
    my @pid = map { /^(\d+)$/; $1 } grep { /^\d+$/ } readdir(D);
    closedir(D);
    wantarray ? @pid : \@pid;
}
sub get_pids_by_pgids {
    my @pgid = @_;
    my %pgid = map { $_ => 1 } @pgid;

    my @pid = grep {
        my %stat = read_proc_stat($_);
        $pgid{ $stat{pgrp} };
    } get_all_pids();
    wantarray ? @pid : \@pid;
}
sub sprint_current_time {
    my ($s, $u) = Time::HiRes::gettimeofday();
    strftime("%Y-%m-%dT%H:%M:%S", localtime $s) . sprintf(".%06d", $u);
}
sub print_verbose {
    my $mesg = shift;
    if($opt_verbose) {
        chomp $mesg;
        warn sprint_current_time(). ": VERBOSE: $mesg\n";
    }
}
sub print_debug {
    my $mesg = shift;
    if($opt_debug) {
        chomp $mesg;
        warn sprint_current_time(). ": DEBUG: $mesg\n";
    }
}
sub print_notice {
    my $mesg = shift;
    unless($opt_quiet) {
        chomp $mesg;
        warn sprint_current_time(). ": NOTICE: $mesg\n";
    }
}
sub print_info {
    my $mesg = shift;
    unless($opt_quiet) {
        chomp $mesg;
        warn sprint_current_time(). ": INFO: $mesg\n";
    }
}
