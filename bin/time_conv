#!/usr/bin/env perl
use strict;
use warnings;
use POSIX;
use Time::timegm;
use Getopt::Long;
use Time::Zone;
use Carp;


my $opt_format =   "(%a)%Y-%m-%dT%H:%M:%S%z";
my $opt_format_z = "(%a)%Y-%m-%dT%H:%M:%SZ";
my $opt_help;
my $opt_verbose;
my $opt_quiet;
my $tz_local_offset = tz_local_offset();

my $r = Getopt::Long::GetOptions(
    'h|help' => \$opt_help,
    'v|verbose' => \$opt_verbose,
    'q|quiet' => \$opt_quiet,
    'F|format=s' => \$opt_format,
    'format_z=s' => \$opt_format_z,
) or die "aborted\n";
if($opt_help) {
    print "Usage: $0 [OPTION] < TEXT\n";
    print "Option:\n";
    print "  -F FORMAT, --format=FORMAT   : (default: '$opt_format')\n";
    print "             --format_z=FORMAT : (default: '$opt_format_z')\n";
    exit;
}

my $current_time = time();
my ($cur_S, $cur_M, $cur_H, $cur_mday, $cur_ymon, $cur_year) = localtime($current_time);
$cur_ymon += 1, $cur_year += 1900;

my @wday_en = map{ lc $_ } qw(Sun Mon Tue Wed Thu Fri Sat);
my %wday_en_to_digit = map { $wday_en[$_] => $_ + 1 } (0.. scalar(@wday_en)-1);

my @ymon_en = map{ lc $_ } qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
my %ymon_en_to_digit = map { $ymon_en[$_] => $_ + 1 } (0.. scalar(@ymon_en)-1);
my $re_tz = qr/[a-zA-Z]{1,4}|[\-\+]\d\d:?\d\d/;

my %tz_map = (
    GMT => 0,
    JST => 9 * 3600,
);

my %gengo_to_year = (
    "K" => 1864, "慶応" => 1864, "慶" => 1864,
    "M" => 1867, "明治" => 1867, "明" => 1867,
    "T" => 1911, "大正" => 1911, "大" => 1911,
    "S" => 1925, "昭和" => 1925, "昭" => 1925,
    "H" => 1988, "平成" => 1988, "平" => 1988,
);

my $re_wday_en_src = join "|", @wday_en;
my $re_ymon_en_src = join "|", @ymon_en;
my $re_wday_en = qr{$re_wday_en_src}i;
my $re_ymon_en = qr{$re_ymon_en_src}i;
my $re_gengo_src = join "|", sort keys %gengo_to_year;
my $re_year_j = qr{ (?<gengo>$re_gengo_src) \s* (?<jyear>元|[1-9][0-9]*) }ix;

sub wday_en_to_digit {
    my $wday_en = shift;
    $wday_en_to_digit{lc($wday_en)} // Carp::confess("invalid wday_en '$wday_en'");
}
sub ymon_en_to_digit {
    my $ymon_en = shift;
    $ymon_en_to_digit{lc($ymon_en)} // Carp::confess("invalid ymon_en '$ymon_en'");
}
sub gengo_to_year {
    my $gengo = shift;
    my $result = $gengo_to_year{uc($gengo)} // Carp::confess("invalid gengo '$gengo'");
    warn "gengo_to_year($gengo) -> $result\n" if $opt_verbose;
    $result;
}
while(<>) {
    chomp;
    s/^\s+//s;
    s/\s+\z//s;
    length $_ or next;
    my ($t, $source) = eval { parse($_) };
    if($@ || !defined $t) {
        warn $@ || "can not convert '$_'\n";
        next;
    }
    print
      sprintf(" %10d %#010x\t", $t, $t)
      , strftime($opt_format, localtime($t))
      , "\t", strftime($opt_format_z, gmtime($t))
      , "\t: $source\n";
}

sub tz_str_parse {
    my $tz_str = shift;
    if(!defined $tz_str) {
        return $tz_local_offset;
    }
    if($tz_str =~ /^(?<sign>[\-\+])(?<H>\d\d):?(?<M>\d\d)\z/) {
        my ($sign, $H, $M) = @+{qw(sign H M)};
        return ($sign eq "-" ? -1 : +1) * ($H * 3600 + $M * 60);
    }
    $tz_map{uc($tz_str)} // Carp::confess("unknown tz_str '$tz_str' ");
}

sub parse {
    local $_ = shift;

    if(/^\s*(now)\s*\z/) {
        return time(), $1;
    }
    if(/^\s*(-?\d+)\s*\z/) {
        return $1, $1;
    }
    if(/^\s*(0x([0-9a-f]{1,9}))\s*\z/i) {
        no warnings;
        return hex($2), $1;
    }

    my ($all, $gengo, $jyear, $year, $ymon_en, $ymon, $mday, $ampm, $H, $M, $S, $tz_str, $tz);

    if(/^\s*(?<all> (?<year>\d\d\d\d)-?(?<ymon>\d\d)-?(?<mday>\d\d)T(?<H>\d\d):?(?<M>\d\d):?(?<S>\d\d) \s* (?<tz_str>$re_tz)? ) \s*\z/x) {
        # ISO8601 : YYYY ["-"] mm ["-"] dd "T" HH [":"] MM [":"] SS
        ($all, $year, $ymon, $mday, $H, $M, $S, $tz_str) = @+{qw(all year ymon mday H M S tz_str)};
    }
    elsif(
        $_ =~ / (?<all> $re_year_j \s* ([\-\/]|年) (?<ymon>[0-9]+)(?:[-\/]|月) (?<mday>[0-9]+) (?: (?:[\/T]|日|\x20) (?: \s*(?<ampm>午前|午後|)(?<H>[0-9]+)(?:(?:時|:)(?:(?<M>[0-9]+)(?:(?:分|:)(?:(?<S>[0-9]+)(?:秒)?)?)?)?)?)?)? \s* (?<tz_str>$re_tz)? ) /x
    ) {
        # ("平成"...) j ["-"|"/"|"年"] m ["-"|"/"|"月"] d ["/"|"T"|" "|"日"] ["午前"|"午後"] H [":"|"時"] M [":"|"分"] S ["秒"] *(" ") TZ
        ($all, $gengo, $jyear, $ymon, $mday, $ampm, $H, $M, $S, $tz_str) = @+{qw(all gengo jyear ymon mday ampm H M S tz_str)};
        ($jyear eq "元") and $jyear = 1;
        $year = gengo_to_year($gengo) + $jyear;
    }
    elsif(
        $_ =~ / (?<all> ((?<year>[0-9]{4})(?:[-\/]|年) (?: \s* (?:\(|（) $re_year_j \s* 年 (?:\)|）) \s* )?)? (?<ymon>[0-9]+)(?:[-\/]|月) (?<mday>[0-9]+) (?: (?:[\/T]|日 (\((月|火|水|木|金|土|日)(曜(日)?)?\))?  |\x20) (?: \s*(?<ampm>午前|午後|)(?<H>[0-9]+)(?:(?:時|:)(?:(?<M>[0-9]+)(?:(?:分|:)(?:(?<S>[0-9]+)(?:秒)?)?)?)?)?)?)? \s* (?<tz_str>$re_tz)? ) /x
    ) {
        # Y ["-"|"/"|"年"] ["(" ("平成"...) j "年)"] m ["-"|"/"|"月"] d ["/"|"T"|" "|"日"] ["午前"|"午後"] H [":"|"時"] M [":"|"分"] S ["秒"] *(" ") TZ
        ($all, $year, $ymon, $mday, $ampm, $H, $M, $S, $tz_str) = @+{qw(all year ymon mday ampm H M S tz_str)};
    }
    elsif(m{ (?<all> (?<mday>\d\d?) ([-/]|\s*) (?<ymon_en>$re_ymon_en) ([-/]|\s*) (?<year>\d\d(\d\d)?) (:|\s+) (?<H>\d\d?):(?<M>\d\d):(?<S>\d\d) \s* (?<tz_str>$re_tz) ) }xi) {
        # RFC1123 : ... 31 Jan 2016 23:59:59 GMT
        # apache  : ... 31/Jan/2016:23:59:59 +0900
        # RFC850  : ... 01-Jan-16 23:59:59 GMT
        ($all, $mday, $ymon_en, $year, $H, $M, $S, $tz_str) = @+{qw(all mday ymon_en year H M S tz_str)};
        if($year < 100) {
            $year += 1900;
            ($year >= 1970) or $year += 100;
        }
    }
    elsif(m{ (?<all> (?<ymon_en>$re_ymon_en) \s+ (?<mday>\d\d?) \s+ (?<H>\d\d):(?<M>\d\d):(?<S>\d\d) \s+ (?<year>\d\d\d\d) (\s+ (?<tz_str>$re_tz))? ) }xi) {
        # rpm : Jan 31 23:59:59 2016 +0900
        ($all, $ymon_en, $mday, $H, $M, $S, $year, $tz_str) = @+{qw(all ymon_en mday H M S year tz_str)};
    }
    else {
        die "unknown format '$_'\n";
    }
    $year //= $cur_year + ($cur_ymon - $ymon >= 6 ? 1 : 0);
    $H //= 0; $M //= 0; $S //= 0;
    ($ampm && $ampm eq "午後") and $H += 12;
    $ymon //= ymon_en_to_digit($ymon_en);
    $tz //= tz_str_parse($tz_str);
    my $t = Time::timegm::timegm_pp($S, $M, $H, $mday, $ymon - 1, $year - 1900);
    return -$tz + $t, $all;
}

